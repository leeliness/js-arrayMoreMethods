"1. Що таке асинхронність?"

"JavaScript виконується по черзі, рядок за рядком — це називається синхронним виконанням."

"Але іноді деякі операції займають більше часу (наприклад, завантаження даних з сервера або таймер)."
"У таких випадках потрібно почекати, щоб не зупиняти інші операції. Ось тут і потрібна асинхронність."

"Приклад:"

// console.log('1');
// console.log('2');
// console.log('3');

"Виведе"
1
2
3

"Приклад асинхронного коду з setTimeout:"

// console.log('1');
// setTimeout(() => {
//   console.log('2'); // Виконається через 2 секунди
// }, 2000);
// console.log('3');

"Виведе"
1
3
2

"2. Що таке проміси?"

"Проміс — це обіцянка, що результат операції буде доступний у майбутньому (успіх або помилка)."
"Проміс має три стани:"
"pending (очікування) — операція ще не завершена."
"fulfilled (виконано) — операція успішно завершена, дані отримані."
"rejected (відхилено) — щось пішло не так, сталася помилка"

// let promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     resolve('Data loaded successfully!');
//   }, 2000); // Симулюємо затримку в 2 секунди
// });

"resolve означає успіх і передає результат далі, а reject використовується, коли щось пішло не так"

// promise
//   .then(result => {
//     console.log(result); // Виведе: Data loaded successfully!
//   })
//   .catch(error => {
//     console.error(error); // Якщо щось піде не так
//   });

"3. Що таке async та await?"

"async та await — це сучасний спосіб роботи з промісами, який дозволяє писати асинхронний код так, ніби він синхронний."
"Функція, позначена як async, завжди повертає проміс."
"await ставиться перед операцією, яка повертає проміс, і ʼчекаєʼ на його завершення."
"це більш читабельний та зрозумілий спосіб працювати з промісами."

async function getUserData() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    const users = await response.json();
    console.log(users);
  } catch (error) {
    console.error('Error fetching user data:', error);
  }
}

getUserData();

"4. Що таке try...catch?"

"try...catch — це механізм для обробки помилок у коді. Він дозволяє вам ʼспробуватиʼ виконати блок коду, а якщо трапиться помилка — ʼзловитиʼ її і обробити у блокові catch."
"Це важливо для того, щоб програма не зупинялася при виникненні помилок, а правильно реагувала на них."
"Hе весь код працює ідеально — бувають ситуації, коли щось йде не так" 
"(наприклад, невірні дані від API, неправильний формат JSON тощо)." 
"Якщо не обробляти помилки, програма може несподівано завершитися." 
"try...catch дозволяє перехоплювати ці помилки та реагувати на них" 
"(наприклад, виводити повідомлення для користувача або повторно виконувати запит)."

"Коли використовувати try...catch?"
"При роботі з асинхронними операціями, API, fetch, або коли є ризик виникнення помилок при обробці даних (наприклад, парсинг JSON)."
try {
  // Код, який може спричинити помилку
  let result = JSON.parse('{"name": "John"}'); // Коректний JSON
  console.log(result); // Виведе об'єкт
} catch (error) {
  // Обробка помилки
  console.error('Сталася помилка:', error);
}


jhjiojp[lkoinop]
try {
  kjsdnfklsnflsknflkdnlflskdf
} catch(error) {
  console.log(error)
}